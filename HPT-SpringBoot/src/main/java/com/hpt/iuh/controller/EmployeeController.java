package com.hpt.iuh.controller;

import com.hpt.iuh.model.Employee;
import com.hpt.iuh.repository.EmployeeRepository;
import com.hpt.iuh.util.CustomErrorType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


import java.util.List;

@RestController // This means that this class is a Controller
@RequestMapping("/api") // This means URL's start with /api (after Application path)
public class EmployeeController {

    public static final Logger logger = LoggerFactory.getLogger(EmployeeController.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    private EmployeeRepository employeeRepository; //Service which will do all data retrieval/manipulation work

    // Retrieve All Employees
    @GetMapping("/employee")
    public ResponseEntity<List<Employee>> listAllEmployees() {
        logger.info("Fetching All Employee");
        List<Employee> employees = employeeRepository.findAll();
        if (employees.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        }
        return new ResponseEntity<>(employees, HttpStatus.OK);
    }

    // Retrieve Single User
    @GetMapping("/employee/{id}")
    public ResponseEntity<?> getEmployee(@PathVariable("id") String id) {
        logger.info("Fetching Employee with id {}", id);
        Employee employee = employeeRepository.findById(id).orElse(null);
        if (employee == null) {
            logger.error("Employee with id {} not found.", id);
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(employee, HttpStatus.OK);
    }

    // Restful API to Create an Employee
    @PostMapping("/employee")
    public ResponseEntity<?> createEmployee(@RequestBody Employee employee) {
        logger.info("Creating Employee : {}", employee);
        // Check employee is existed
        if (employeeRepository.existsById(employee.getEmployee_id())) {
            logger.error("Unable to create. An employee with id {} - name {} already exist", employee.getEmployee_id(), employee.getName());
            return new ResponseEntity<>(new CustomErrorType("Unable to create. A User with id "
                    + employee.getEmployee_id() + " and name "
                    + employee.getName() + " already exist."), HttpStatus.CONFLICT);
        }

        employeeRepository.save(employee);
        return new ResponseEntity<>(employee, HttpStatus.CREATED);
    }

    // Update a User
    @PutMapping("/employee/{id}")
    public ResponseEntity<?> updateUser(@PathVariable("id") String id, @RequestBody Employee employee) {
        logger.info("Updating User with id {}", id);

        Employee currentEmployee = employeeRepository.findById(id).orElse(null);

        if (currentEmployee == null) {
            logger.error("Unable to update. User with id {} not found.", id);
            return new ResponseEntity<>(new CustomErrorType("Unable to update. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }

        currentEmployee.setName(employee.getName());
        currentEmployee.setAddress(employee.getName());
        currentEmployee.setDepartment_id(employee.getDepartment_id());
        currentEmployee.setSex(employee.isSex());
        currentEmployee.setPhone(employee.getPhone());
        currentEmployee.setEmail(employee.getPhone());

        employeeRepository.save(currentEmployee);

        return new ResponseEntity<>(currentEmployee, HttpStatus.OK);
    }

    // Delete a User
    @DeleteMapping("/employee/{id}")
    public ResponseEntity<?> deleteUser(@PathVariable("id") String id) {
        logger.info("Fetching & Deleting User with id {}", id);

        Employee employee = employeeRepository.findById(id).orElse(null);
        if (employee == null) {
            logger.error("Unable to delete. User with id {} not found.", id);
            return new ResponseEntity<>(new CustomErrorType("Unable to delete. User with id " + id + " not found."),
                    HttpStatus.NOT_FOUND);
        }
        employeeRepository.deleteById(id);
        return new ResponseEntity<Employee>(HttpStatus.NO_CONTENT);
    }
}
